(base) jinyounglee@JinYoungui-MacBook-Pro ~ % edgedb -I dracula
thread 'async-std/runtime' panicked at 'cannot initialize I/O event notification: Os { code: 23, kind: Other, message: "Too many open files in system" }', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/async-io-1.3.1/src/reactor.rs:68:39
stack backtrace:
   0: _rust_begin_unwind
   1: core::panicking::panic_fmt
   2: core::option::expect_none_failed
   3: core::ops::function::FnOnce::call_once
   4: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   5: once_cell::imp::initialize_inner
   6: once_cell::imp::OnceCell<T>::initialize
   7: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: std::thread::local::LocalKey<T>::with
   5: async_std::task::builder::Builder::blocking
   6: edgedb::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-io' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_io::driver::main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2: once_cell::imp::initialize_inner
   3: once_cell::imp::OnceCell<T>::initialize
   4: async_global_executor::threading::thread_main_loop
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'async-std/runtime' panicked at 'Lazy instance has previously been poisoned', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.2/src/lib.rs:1002:25
stack backtrace:
   0: std::panicking::begin_panic
   1: once_cell::imp::OnceCell<T>::initialize::{{closure}}
   2%                                                                                                       ((b((b((((((((((((((base) jinyounglee@JinYoungui-MacBook-Pro ~ % 
